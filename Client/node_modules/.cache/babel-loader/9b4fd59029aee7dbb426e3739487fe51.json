{"ast":null,"code":"import { osState } from './ridge';\n\nfunction tryParseJSON(jsonString) {\n  try {\n    return JSON.parse(jsonString);\n  } catch (error) {\n    return null;\n  }\n}\n\nexport class Bridge {\n  static postMessage(action, value) {\n    var _ReactNativeWebView;\n\n    const data = JSON.stringify({\n      action,\n      value\n    });\n    (_ReactNativeWebView = window.ReactNativeWebView) === null || _ReactNativeWebView === void 0 ? void 0 : _ReactNativeWebView.postMessage(data);\n  }\n\n  static handleMessageEvent(_ref) {\n    let {\n      data\n    } = _ref;\n    const command = tryParseJSON(data);\n    if ((command === null || command === void 0 ? void 0 : command.kind) !== 'webview') return;\n\n    if (Bridge[command.action]) {\n      Bridge[command.action](command.value);\n    } else {\n      Bridge.postMessage('error', `(RN -> WebView) Invalid action: ${data}`);\n    }\n  }\n\n  static init(_ref2) {\n    let {\n      os\n    } = _ref2;\n    osState.set(os !== null && os !== void 0 ? os : 'webView');\n  }\n\n} // @ts-ignore\n\nBridge.os = void 0;\ndocument.addEventListener('message', Bridge.handleMessageEvent);\nwindow.addEventListener('message', Bridge.handleMessageEvent);","map":{"version":3,"sources":["/Users/oyujin/Documents/GitHub/lol-publishing/src/plugins/bridge.ts"],"names":["osState","tryParseJSON","jsonString","JSON","parse","error","Bridge","postMessage","action","value","data","stringify","window","ReactNativeWebView","handleMessageEvent","command","kind","init","os","set","document","addEventListener"],"mappings":"AAAA,SAASA,OAAT,QAAwB,SAAxB;;AAaA,SAASC,YAAT,CAAsBC,UAAtB,EAAuC;AACrC,MAAI;AACF,WAAOC,IAAI,CAACC,KAAL,CAAWF,UAAX,CAAP;AACD,GAFD,CAEE,OAAOG,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF;;AAED,OAAO,MAAMC,MAAN,CAAa;AAGA,SAAXC,WAAW,CAACC,MAAD,EAAiBC,KAAjB,EAA8B;AAAA;;AAC9C,UAAMC,IAAI,GAAGP,IAAI,CAACQ,SAAL,CAAe;AAAEH,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAf,CAAb;AACA,2BAACG,MAAD,CAAgBC,kBAAhB,4EAAoCN,WAApC,CAAgDG,IAAhD;AACD;;AAEwB,SAAlBI,kBAAkB,OAAyB;AAAA,QAAxB;AAAEJ,MAAAA;AAAF,KAAwB;AAChD,UAAMK,OAAO,GAAGd,YAAY,CAACS,IAAD,CAA5B;AACA,QAAI,CAAAK,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,IAAT,MAAkB,SAAtB,EAAiC;;AACjC,QAAIV,MAAM,CAACS,OAAO,CAACP,MAAT,CAAV,EAA4B;AAC1BF,MAAAA,MAAM,CAACS,OAAO,CAACP,MAAT,CAAN,CAAuBO,OAAO,CAACN,KAA/B;AACD,KAFD,MAEO;AACLH,MAAAA,MAAM,CAACC,WAAP,CAAmB,OAAnB,EAA6B,mCAAkCG,IAAK,EAApE;AACD;AACF;;AAEU,SAAJO,IAAI,QAAc;AAAA,QAAb;AAAEC,MAAAA;AAAF,KAAa;AACvBlB,IAAAA,OAAO,CAACmB,GAAR,CAAYD,EAAZ,aAAYA,EAAZ,cAAYA,EAAZ,GAAkB,SAAlB;AACD;;AApBiB,C,CAuBpB;;AAvBaZ,M,CACJY,E;AAuBTE,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCf,MAAM,CAACQ,kBAA5C;AACAF,MAAM,CAACS,gBAAP,CAAwB,SAAxB,EAAmCf,MAAM,CAACQ,kBAA1C","sourcesContent":["import { osState } from './ridge';\n\ntype Action = 'log' | 'error';\n\ninterface Command {\n  kind?: 'webview';\n  action: Exclude<\n    keyof typeof Bridge,\n    'prototype' | 'os' | 'postMessage' | 'handleMessageEvent'\n  >;\n  value?: any;\n}\n\nfunction tryParseJSON(jsonString: any) {\n  try {\n    return JSON.parse(jsonString);\n  } catch (error) {\n    return null;\n  }\n}\n\nexport class Bridge {\n  static os: string;\n\n  static postMessage(action: Action, value?: any) {\n    const data = JSON.stringify({ action, value });\n    (window as any).ReactNativeWebView?.postMessage(data);\n  }\n\n  static handleMessageEvent({ data }: MessageEvent) {\n    const command = tryParseJSON(data) as Command;\n    if (command?.kind !== 'webview') return;\n    if (Bridge[command.action]) {\n      Bridge[command.action](command.value);\n    } else {\n      Bridge.postMessage('error', `(RN -> WebView) Invalid action: ${data}`);\n    }\n  }\n\n  static init({ os }: any) {\n    osState.set(os ?? 'webView');\n  }\n}\n\n// @ts-ignore\ndocument.addEventListener('message', Bridge.handleMessageEvent);\nwindow.addEventListener('message', Bridge.handleMessageEvent);\n"]},"metadata":{},"sourceType":"module"}